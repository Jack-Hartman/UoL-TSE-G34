{"version":3,"sources":["Components/Graphs/Graph.js","Components/Parts/DefaultGraphs.js","Components/Card/Card.js","Components/Parts/WorldWide.js","Components/Parts/DragnDrop.js","Components/Parts/News.js","Views/Default.js","Views/About.js","Views/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","React","Component","data","x","y","defaultData","graphicColor","DefaultGraphs","useState","dataToDisplay","setGraphicData","useEffect","fetch","then","res","ok","json","console","log","Container","fluid","style","backgroundColor","alignSelf","Row","Col","width","alignContent","marginTop","Card","className","Body","Title","Subtitle","padding","animate","easing","duration","height","colorScale","innerRadius","Text","Link","href","marginRight","offset","Worldwide","scale","interpolation","fill","DragNdrop","News","props","state","newsapi","NewsAPI","a","error","message","statusText","Promise","reject","setState","catch","Default","About","Loading","class","App","View","handleAboutClick","bind","handleAccountClick","handleCreateClick","handleHomeClick","setTimeout","this","destination","ui","Navbar","Brand","onClick","Nav","Button","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f13f0cb3.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport { \n    VictoryPie, \n    VictoryChart, \n    VictoryTheme, \n    VictoryAxis, \n    VictoryBar, \n    VictoryPolarAxis \n} from 'victory';\n\nimport pie from './Pie';\n\n\nconst iData = [\n    { x: \"Cats\", y: 200 },\n    { x: \"Dogs\", y: 40 },\n    { x: \"Birds\", y: 55 }\n]\n\nconst data = [\n    {quarter: 1, earnings: 13000},\n    {quarter: 2, earnings: 16500},\n    {quarter: 3, earnings: 14250},\n    {quarter: 4, earnings: 19000}\n];\n\nconst bar = () => {\n    return (\n        <VictoryChart\n        // adding the material theme provided with Victory\n        theme={VictoryTheme.material}\n        domainPadding={20}\n      >\n        <VictoryAxis\n          tickValues={[1, 2, 3, 4]}\n          tickFormat={[\"Quarter 1\", \"Quarter 2\", \"Quarter 3\", \"Quarter 4\"]}\n        />\n        <VictoryAxis\n          dependentAxis\n          tickFormat={(x) => (`$${x / 1000}k`)}\n        />\n        <VictoryBar\n          data={data}\n          x=\"quarter\"\n          y=\"earnings\"\n        />\n      </VictoryChart>\n    );\n}\n\nconst polar = () => {\n    return (\n        <VictoryChart polar\n        theme={VictoryTheme.material}\n        >\n            {\n                [\"cat\", \"dog\", \"bird\", \"dog\", \"frog\", \"fish\"].map((d, i) => {\n                return (\n                    <VictoryPolarAxis dependentAxis\n                    key={i}\n                    label={d}\n                    labelPlacement=\"perpendicular\"\n                    style={{ tickLabels: { fill: \"none\" } }}\n                    axisValue={d}\n                    />\n                );\n                })\n            }\n            <VictoryBar\n                style={{ data: { fill: \"tomato\", width: 25 } }}\n                data={[\n                { x: \"cat\", y: 10 },\n                { x: \"dog\", y: 25 },\n                { x: \"bird\", y: 40 },\n                { x: \"frog\", y: 50 },\n                { x: \"fish\", y: 50 }\n                ]}\n            />\n        </VictoryChart>\n    );\n}\n\n// const Graph = (props) => {\n\n//     const [data, setData] = useState([]);\n//     const type = false;\n\n//     useEffect(() => {\n//         fetch('/api').then((res) => {\n//             if (res.ok) {\n//                 return res.json();\n//             }\n//         }).then(data => console.log(data));\n//     }, []);\n\n//     if (type) {\n//         return (\n//             <pie />\n//         );\n//     } else {\n//         return (\n//             <h1>False</h1>\n//         );\n//     }\n// }\n\nclass Graph extends React.Component {\n\n    // useEffect(() => {\n    //     fetch('/api').then((res) => {\n    //         if (res.ok) {\n    //             return res.json();\n    //         }\n    //     }).then(data => console.log(data));\n    // }), []);\n\n    render() {\n        return (\n            <div>\n                <pie />\n                <h1>Yo</h1>\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React, { Component, useEffect, useState } from 'react';\n\n// Import Boootstrap components:\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\n// Import victory charts:\nimport { \n    VictoryChart,\n    VictoryAxis,\n    VictoryTheme,\n    VictoryBar,\n    VictoryPie,\n    VictoryGroup\n} from 'victory';\n\n// Import my Components:\nimport DataGripCard from '../Card/Card';\n\nconst data = [\n    {x: 'Deaths', y: 13000},\n    {x: 'Recovered', y: 500}\n];\nconst defaultData = [\n    {x: 'Deaths', y: 13000},\n    {x: 'Recovereed', y:500}\n]\n\nconst graphicColor = ['#388087', '#6fb3b8'];\n\nconst DefaultGraphs = () => {\n\n    const [dataToDisplay, setGraphicData] = useState(defaultData);\n\n    useEffect(() => {\n        fetch('/defaultData').then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n        }).then(data => console.log(data));\n\n        setGraphicData(data); // Setting the data that we want to display\n    }, []);\n\n    return (\n        <Container fluid style={{ backgroundColor: '#293742', alignSelf: 'center'}}>\n            <Row>\n                <Col>\n                    <div style={\n                        {\n                            width: '20rem', \n                            backgroundColor: '#293742', \n                            alignContent: 'center',\n                            marginTop: '10px' \n                        }\n                    }>\n                        <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Deaths / Recoveries</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>UK</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n                                    {/* <VictoryChart\n                                        // adding the material theme provided with Victory\n                                        theme={VictoryTheme.material}\n                                    > */}\n                                        \n                                    <VictoryPie \n                                        animate={{ easing: 'exp', duration: 1000 }} \n                                        data={dataToDisplay} \n                                        width={250} \n                                        height={250} \n                                        colorScale={graphicColor} \n                                        innerRadius={50} \n                                    />\n                                    {/* </VictoryChart> */}\n                                </Card.Body>\n                                <Card.Text>\n                                Death and recoveries for the country\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n                <Col>\n                    <div style={{\n                        width: '20rem', \n                        backgroundColor: '#293742', \n                        alignContent: 'center', \n                        marginRight: '10px', \n                        marginTop: '10px' \n                    }}>\n                        <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Information for each country in 'users continent '</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>UK</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n                                    <VictoryChart>\n                                        <VictoryGroup offset={20}\n                                            colorScale={\"qualitative\"}\n                                        >\n                                            <VictoryBar\n                                            data={[{ x: 'Deaths', y: 1 }, { x: 'Cases', y: 2 }, { x: 'Vaccines', y: 5 }]}\n                                            />\n                                            <VictoryBar\n                                            data={[{ x: 'Deaths', y: 2 }, { x: 'Cases', y: 1 }, { x: 'Vaccines', y: 7 }]}\n                                            />\n                                            <VictoryBar\n                                            data={[{ x: 'Deaths', y: 3 }, { x: 'Cases', y: 4 }, { x: 'Vaccines', y: 9 }]}\n                                            />\n                                        </VictoryGroup>\n                                    </VictoryChart>\n                                </Card.Body>\n                                <Card.Text>\n                                Data for the infection rate, cases, deaths, vaccines given.\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n                <Col>\n                    <div style={{\n                        width: '20rem', \n                        backgroundColor: '#293742', \n                        alignContent: 'center', \n                        marginRight: '10px', \n                        marginTop: '10px' \n                    }}>\n                        <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Deaths / Recoveries / Living / Infected</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>UK</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n                                    \n                                </Card.Body>\n                                <Card.Text>\n                                Some quick example text incase \n                                the user may want to put notes here. \n                                This feature can easily be taken out \n                                but I implemented it just incase we had \n                                a use for it.\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default DefaultGraphs;\n","import React from 'react';\n//import { Card, CardBody, CardHeader, Heading } from 'grommet';\nimport Graph from '../Graphs/Graph';\n\nimport Card from 'react-bootstrap/Card';\n\nclass DataGripCard extends React.Component {\n    \n    render() {\n        return (\n            <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n              <Card.Body>\n                <Card.Title>{ this.props.name }</Card.Title>\n                <Card.Subtitle className='mb-2 text-muted'>{ this.props.index }</Card.Subtitle>\n                <Card.Body style={{ padding: '2px'}}>\n                  {/* <Graph>{ this.props.type }</Graph> */}\n                  <Graph>{ this.props.type }</Graph>\n                </Card.Body>\n                <Card.Text>\n                  Some quick example text incase \n                  the user may want to put notes here. \n                  This feature can easily be taken out \n                  but I implemented it just incase we had \n                  a use for it.\n                </Card.Text>\n                <Card.Link href='#'>Enlarge</Card.Link>\n                <Card.Link href='#'>Edit</Card.Link>\n              </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default DataGripCard;","import React, { useEffect } from 'react';\n\n// Import Boootstrap components:\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\n// Import Victory:\nimport { \n    VictoryChart,\n    VictoryArea, \n    VictoryStack, \n    VictoryPortal, \n    VictoryGroup, \n    VictoryScatter \n} from 'victory';\n\nconst graphicColor = ['#80FFBE', '#6FDEC6', '#3FA18B'];\n\nclass Worldwide extends React.Component{\n\n    render() {\n        return (\n            <Container fluid style={{padding: '10px', backgroundColor: '#293742', alignSelf: 'center'}}>\n                <div style={\n                    {\n                        width: '30rem', \n                        backgroundColor: '#293742', \n                    }  \n                }>\n                    <Card  className='text-white' style={{ backgroundColor: '#202B33'}}>\n                        <Card.Body>\n                            <Card.Title>Population / Infecfcted / Deaths</Card.Title>\n                            <Card.Subtitle className='mb-2 text-muted'>World Wide</Card.Subtitle>\n                            <Card.Body style={{ padding: '2px'}}>\n                                <VictoryChart scale={{ x: \"time\" }} width={400} height={400} animate={1000}>\n                                    {/* <VictoryStack colorScale=\"warm\"> */}\n                                    <VictoryStack colorScale={graphicColor}>\n                                        <VictoryGroup\n                                            data={[\n                                                { x: 'Jan 2020', y: 2 },\n                                                { x: 'Feb 2020', y: 3 },\n                                                { x: 'March 2020', y: 5 },\n                                                { x: 'April 2020', y: 4 },\n                                                { x: 'May 2020', y: 6 }\n                                            ]}\n                                        >\n                                        <VictoryArea interpolation={'natural'} />\n                                        <VictoryPortal>\n                                            <VictoryScatter\n                                            style={{ data: { fill: \"black\" } }}\n                                            />\n                                        </VictoryPortal>\n                                        </VictoryGroup>\n                                        <VictoryGroup\n                                        data={[\n                                            { x: 'Jan 2020', y: 2 },\n                                            { x: 'Feb 2020', y: 3 },\n                                            { x: 'March 2020', y: 5 },\n                                            { x: 'April 2020', y: 4 },\n                                            { x: 'May 2020', y: 6 }\n                                        ]}\n                                        >\n                                        <VictoryArea interpolation={'natural'} />\n                                        <VictoryPortal>\n                                            <VictoryScatter\n                                            style={{ data: { fill: \"black\" } }}\n                                            />\n                                        </VictoryPortal>\n                                        </VictoryGroup>\n                                        <VictoryGroup\n                                        data={[\n                                            { x: 'Jan 2020', y: 2 },\n                                            { x: 'Feb 2020', y: 3 },\n                                            { x: 'March 2020', y: 5 },\n                                            { x: 'April 2020', y: 4 },\n                                            { x: 'May 2020', y: 6 }\n                                        ]}\n                                        >\n                                        <VictoryArea interpolation={'natural'} />\n                                        <VictoryPortal>\n                                            <VictoryScatter\n                                            style={{ data: { fill: \"black\" } }}\n                                            />\n                                        </VictoryPortal>\n                                        </VictoryGroup>\n                                    </VictoryStack>\n                                    </VictoryChart>\n                            </Card.Body>\n                            <Card.Text>\n                            Some quick example text incase \n                            the user may want to put notes here. \n                            This feature can easily be taken out \n                            but I implemented it just incase we had \n                            a use for it.\n                            </Card.Text>\n                            <Card.Link href='#'>Enlarge</Card.Link>\n                            <Card.Link href='#'>Edit</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </div>\n            </Container>\n        )\n    }\n}\n\nexport default Worldwide;\n","// Import React.\nimport React, { useState, useRef } from 'react';\n\n// Import Bootstrap Component:\nimport Col from 'react-bootstrap/Col';\n\n// Import my components:\nimport DataGripCard from '../Card/Card';\n\nconst data = { // Example data for the graphs.\n\titems: ['1', '2', '3', '4', '5', '6'] // Create a grid like object/array to better initiate the dragging functionality.\n}\n\nconst types = {\n\titems: ['1', '2', '3', '1', '2', '3'] // Create a test object to store the graphs created.\n}\n\nfunction DragNdrop() {\n\n    const [list, setList] = useState(data); // Create states for list.\n\tconst [dragging, setDragging] = useState(false); // Create statets for dragging.\n\tconst dragItem = useRef(); \n\tconst dragNode = useRef();\n\n    const handleDragStart = (e, location) => { // Calls when the mouse clicks on the item to initiate the drag.\n\t\tconsole.log('drag starting', location);\n\t\tdragItem.current = location;\n\t\tdragNode.current = e.target;\n\t\tdragNode.current.addEventListener('dragend', handleDragEnd);\n\t\tsetTimeout(() => {\n\t\t\tsetDragging(true);\n\n\t\t}, 0)\n\t}\n\n\tconst handleDragEnd = () => { // Calls when the user lifts the mouse button.\n\t\tconsole.log('Ending Drag');\n\t\tsetDragging(false);\n\t\tdragItem.current = null;\n\t\tdragNode.current.removeEventListener('dragend', handleDragEnd);\n\t\tdragNode.current = null;\n\t}\n\n\tconst handleDragEnter = (e, location) => { // Calls when the object being dragged overlaps another item.\n\t\tconsole.log('Entering Item', location);\n\n\t\tconst currentItem = dragItem.current;\n\n\t\tif (e.target !== dragNode.current) {\n\t\t\tconsole.log(\"TARGET IS NOT THE SAME\");\n\t\t\tsetList(oldList => {\n\t\t\t\tlet newList = JSON.parse(JSON.stringify(oldList)); // This isn't very efficient.\n\t\t\t\tnewList.items.splice(location, 0, newList.items.splice(currentItem.i1, 1)[0]);\n\t\t\t\tdragItem.current = location;\t\n\t\t\t\treturn newList;\n\t\t\t})\n\t\t}\n\t\tconsole.log(data.items);\n\n\t}\n\n    const getStyles = () => { // A template to maybe add stylse to the project.\n\t\treturn 'current';\n\t}\n\t\n    return (\n        <>\n            {\n                list.items.map((i, i1) => (\n                    <div style={{width: '20rem', backgroundColor: '#293742', alignContent: 'center', marginRight: '10px', marginTop: '10px' }} className={dragging?getStyles():\"dndItem\"} draggable onDragStart={(e) => {\n                        handleDragStart(e, i1)\n                    }} \n                    onDragEnter={dragging?(e) => {\n                        handleDragEnter(e, i1)\n                    } : null}>\n                        <Col>\n                            <DataGripCard name={i} type={types.items[i1]}/>\n                        </Col>\n                    </div>\n                ))\n            }\n        </>\n    );\n}\n\nexport default DragNdrop;","\nimport React, { Component } from 'react';\nimport NewsAPI from 'newsapi';\n\n\nclass News extends Component {\n    constructor(props) {\n        super (props);\n        \n        this.state = { News: 'loading'}\n        this.newsapi = new NewsAPI('656d88bc51824b7b9b1a695745fdcef2');\n    \n    }\n\n    componentDidMount() {\n\t\t// GET request using fetch with error handling\n\t\tfetch('https://newsapi.org/v2/everything?q=tesla&from=2021-03-01&sortBy=publishedAt&apiKey=656d88bc51824b7b9b1a695745fdcef2')\n\t\t\t.then(async res => {\n\t\t\t\tconst data = await res.json();\n\n\t\t\t\t// Check for error response:\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tconst error = (data && data.message) || res.statusText;\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t}\n\n\t\t\t\tthis.setState({ News: 'loaded' });\n\t\t\t\tconsole.log(res.json);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({ News: 'absent' });\n\t\t\t\tconsole.error('Error: ', error);\n\t\t\t});\n    }\n\n    render() {\n        return(\n            <h1>Hello</h1>\n        );\n    }\n}\n\nexport default News;","\nimport React, { Component } from 'react'; // Import React.\n\n// Import Bootstrap Components: (Import each component ont at a time to save space).\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n// Import My Components:\nimport DefaultGraphs from '../Components/Parts/DefaultGraphs';\nimport Worldwide from '../Components/Parts/WorldWide';\nimport DragNdrop from '../Components/Parts/DragnDrop';\nimport News from '../Components/Parts/News';\n\nclass Default extends Component {\n\n    render() {\n        return (\n            <Container fluid style={{padding: '5px', backgroundColor: '#293742', alignSelf: 'center'}}>\n\t\t\t\t<Row style={{ width: '100%'}}>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Worldwide />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<DefaultGraphs />\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<News />\n\t\t\t\t</Row>\n\t\t\t\t{/* <Row>\n\t\t\t\t\t<DragNdrop />\n\t\t\t\t</Row> */}\n\t\t\t</Container>\n        );\n    }\n}\n\nexport default Default;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\n\nfunction About() {\n    return (\n        <Container>\n            <h1>G34 Covid Analyser</h1>\n            <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                <Card.Title>\n                    How to install for development\n                </Card.Title>\n                <Card.Body>\n                    <h3>Front End:</h3>\n                    <p>Go to repo in terminal. \n                        Then go to the g34-covid-analyser folder.\n                        Then run 'npm instal'\n                    </p>\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n}\n\nexport default About;\n\n","// Import CSS.\nimport '../Styles/Loading.css';\n\n// Import React.\nimport React, { Componeent } from 'react';\n\nconst Loading = () => {\n\n    return (\n        <>\n            <div class=\"loader\">\n                <div class=\"loader-inner\">\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Loading;","// Import CSS.\nimport './App.css'; // Import styings for the application.\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import the bootstrap styles.\n\n// Import React.\nimport React, { Component } from 'react'; // Import react.\n\n// Import My Components.\nimport Default from './Views/Default';\nimport About from './Views/About';\nimport Loading from './Views/Loading';\n\n// Import Bootstrap Components (Import each component ont at a time to save space).\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\n\nclass App extends Component {\n\t\n\tconstructor(props) {\n\t\tsuper (props);\n\t\tthis.state = { View: 'loading'}\n\n\t\t// This binding is neccessary to make `this` work in the callback\n\t\tthis.handleAboutClick = this.handleAboutClick.bind(this);\n\t\tthis.handleAccountClick = this.handleAccountClick.bind(this);\n\t\tthis.handleCreateClick = this.handleCreateClick.bind(this);\n\t\tthis.handleHomeClick = this.handleHomeClick.bind(this);\n\t}\n\n\tcomponentDidMount() { // Runs after compoennt has been mounted\n\t\tsetTimeout(() => {\n\t\t\tthis.setState(state => ({\n\t\t\t\tView: 'default'\n\t\t\t}));\n\t\t}, 3000);\n\t}\n\n\tgetCurrentView() {\n\t\treturn this.state;\n\t}\n\n\thandleNavClick(destination) {\n\t\t// Need to see what the value is:\n\t\tthis.setState(state => ({ // set the state.\n\t\t\tView: 'about'\n\t\t}));\n\t}\n\n\thandleCreateClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'create'\n\t\t}));\n\t}\n\n\thandleAboutClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'about'\n\t\t}));\n\t}\n\n\thandleAccountClick() {\n\n\t}\n\n\thandleHomeClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'default'\n\t\t}));\n\t}\n\t\n\trender () {\t\n\t\tlet ui;\n\t\t\n\t\tif (this.state.View === 'default') {\n\t\t\tui = <Default />\n\t\t} else if (this.state.View === 'about') {\n\t\t\tui = <About />\n\t\t} else if (this.state.View === 'loading') {\n\t\t\tui = <Loading />\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Navbar style={{ backgroundColor: '#30404D' }} className='text-white'>\n\t\t\t\t\t<Navbar.Brand onClick={this.handleHomeClick}>G34 Covid Analyser</Navbar.Brand>\n\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t<Button variant=\"primary\">Create</Button>\n\t\t\t\t\t\t<Button variant=\"info\" onClick={this.handleAboutClick}>About</Button>\n\t\t\t\t\t\t<Button variant=\"danger\">Account</Button>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar>\n\t\t\t\t\n\t\t\t\t{/* Where the main view of the application is */}\n\t\t\t\t{\n\t\t\t\t\tui\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}