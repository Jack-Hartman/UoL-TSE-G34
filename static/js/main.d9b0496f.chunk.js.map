{"version":3,"sources":["Components/Graphs/Graph.js","Components/Card/Card.js","Components/Parts/DefaultGraphs.js","Components/Parts/WorldWide.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","React","Component","DataGripCard","Card","className","style","width","backgroundColor","Body","Title","this","props","name","Subtitle","index","padding","type","Text","Link","href","data","x","y","DefaultGraphs","useEffect","fetch","then","res","ok","json","console","log","Container","alignSelf","Row","Col","alignContent","marginRight","marginTop","theme","VictoryTheme","material","Worldwide","interpolation","items","types","App","useState","list","setList","dragging","setDragging","dragItem","useRef","dragNode","handleDragEnd","current","removeEventListener","Navbar","Brand","Nav","map","i","i1","draggable","onDragStart","e","location","target","addEventListener","setTimeout","handleDragStart","onDragEnter","currentItem","oldList","newList","JSON","parse","stringify","splice","handleDragEnter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9b0496f.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport { \n    VictoryPie, \n    VictoryChart, \n    VictoryTheme, \n    VictoryAxis, \n    VictoryBar, \n    VictoryPolarAxis \n} from 'victory';\n\nimport pie from './Pie';\n\n\nconst iData = [\n    { x: \"Cats\", y: 200 },\n    { x: \"Dogs\", y: 40 },\n    { x: \"Birds\", y: 55 }\n]\n\nconst data = [\n    {quarter: 1, earnings: 13000},\n    {quarter: 2, earnings: 16500},\n    {quarter: 3, earnings: 14250},\n    {quarter: 4, earnings: 19000}\n];\n\nconst bar = () => {\n    return (\n        <VictoryChart\n        // adding the material theme provided with Victory\n        theme={VictoryTheme.material}\n        domainPadding={20}\n      >\n        <VictoryAxis\n          tickValues={[1, 2, 3, 4]}\n          tickFormat={[\"Quarter 1\", \"Quarter 2\", \"Quarter 3\", \"Quarter 4\"]}\n        />\n        <VictoryAxis\n          dependentAxis\n          tickFormat={(x) => (`$${x / 1000}k`)}\n        />\n        <VictoryBar\n          data={data}\n          x=\"quarter\"\n          y=\"earnings\"\n        />\n      </VictoryChart>\n    );\n}\n\nconst polar = () => {\n    return (\n        <VictoryChart polar\n        theme={VictoryTheme.material}\n        >\n            {\n                [\"cat\", \"dog\", \"bird\", \"dog\", \"frog\", \"fish\"].map((d, i) => {\n                return (\n                    <VictoryPolarAxis dependentAxis\n                    key={i}\n                    label={d}\n                    labelPlacement=\"perpendicular\"\n                    style={{ tickLabels: { fill: \"none\" } }}\n                    axisValue={d}\n                    />\n                );\n                })\n            }\n            <VictoryBar\n                style={{ data: { fill: \"tomato\", width: 25 } }}\n                data={[\n                { x: \"cat\", y: 10 },\n                { x: \"dog\", y: 25 },\n                { x: \"bird\", y: 40 },\n                { x: \"frog\", y: 50 },\n                { x: \"fish\", y: 50 }\n                ]}\n            />\n        </VictoryChart>\n    );\n}\n\n// const Graph = (props) => {\n\n//     const [data, setData] = useState([]);\n//     const type = false;\n\n//     useEffect(() => {\n//         fetch('/api').then((res) => {\n//             if (res.ok) {\n//                 return res.json();\n//             }\n//         }).then(data => console.log(data));\n//     }, []);\n\n//     if (type) {\n//         return (\n//             <pie />\n//         );\n//     } else {\n//         return (\n//             <h1>False</h1>\n//         );\n//     }\n// }\n\nclass Graph extends React.Component {\n\n    // useEffect(() => {\n    //     fetch('/api').then((res) => {\n    //         if (res.ok) {\n    //             return res.json();\n    //         }\n    //     }).then(data => console.log(data));\n    // }), []);\n\n    render() {\n        return (\n            <div>\n                <pie />\n                <h1>Yo</h1>\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React from 'react';\n//import { Card, CardBody, CardHeader, Heading } from 'grommet';\nimport Graph from '../Graphs/Graph';\n\nimport Card from 'react-bootstrap/Card';\n\nclass DataGripCard extends React.Component {\n    \n    render() {\n        return (\n            <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n              <Card.Body>\n                <Card.Title>{ this.props.name }</Card.Title>\n                <Card.Subtitle className='mb-2 text-muted'>{ this.props.index }</Card.Subtitle>\n                <Card.Body style={{ padding: '2px'}}>\n                  {/* <Graph>{ this.props.type }</Graph> */}\n                  <Graph>{ this.props.type }</Graph>\n                </Card.Body>\n                <Card.Text>\n                  Some quick example text incase \n                  the user may want to put notes here. \n                  This feature can easily be taken out \n                  but I implemented it just incase we had \n                  a use for it.\n                </Card.Text>\n                <Card.Link href='#'>Enlarge</Card.Link>\n                <Card.Link href='#'>Edit</Card.Link>\n              </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default DataGripCard;","import React, { Component, useEffect, useState } from 'react';\n\n// Import Boootstrap components:\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\n// Import victory charts:\nimport { \n    VictoryChart,\n    VictoryAxis,\n    VictoryTheme,\n    VictoryBar,\n    VictoryPie\n} from 'victory';\n\n// Import my Components:\nimport DataGripCard from '../Card/Card';\n\nconst data = [\n    {x: 'Deaths', y: 13000},\n    {x: 'Recovered', y: 500},\n];\n\n\nconst DefaultGraphs = () => {\n\n    useEffect(() => {\n        fetch('/api').then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n        }).then(data => console.log(data));\n    })\n    \n    return (\n        <Container style={{padding: '10px', backgroundColor: '#293742', alignSelf: 'center'}}>\n            <Row>\n                <Col>\n                    <div style={\n                        {\n                            width: '20rem', \n                            backgroundColor: '#293742', \n                            alignContent: 'center', \n                            marginRight: '10px', \n                            marginTop: '10px' \n                        }\n                    }>\n                        <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Deaths / Recoveries</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>UK</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n                                    <VictoryChart\n                                        // adding the material theme provided with Victory\n                                        theme={VictoryTheme.material}\n                                    >\n                                        \n                                        <VictoryPie data={data} />\n                                    </VictoryChart>\n                                </Card.Body>\n                                <Card.Text>\n                                Some quick example text incase \n                                the user may want to put notes here. \n                                This feature can easily be taken out \n                                but I implemented it just incase we had \n                                a use for it.\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n                <Col>\n                    <div style={{\n                        width: '20rem', \n                        backgroundColor: '#293742', \n                        alignContent: 'center', \n                        marginRight: '10px', \n                        marginTop: '10px' \n                    }}>\n                        <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Men VS Women</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>UK</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n                                    \n                                </Card.Body>\n                                <Card.Text>\n                                Some quick example text incase \n                                the user may want to put notes here. \n                                This feature can easily be taken out \n                                but I implemented it just incase we had \n                                a use for it.\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n                <Col>\n                    <div style={{\n                        width: '20rem', \n                        backgroundColor: '#293742', \n                        alignContent: 'center', \n                        marginRight: '10px', \n                        marginTop: '10px' \n                    }}>\n                        <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Deaths / Recoveries / Living / Infected</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>UK</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n\n                                \n\n\n\n                                </Card.Body>\n                                <Card.Text>\n                                Some quick example text incase \n                                the user may want to put notes here. \n                                This feature can easily be taken out \n                                but I implemented it just incase we had \n                                a use for it.\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default DefaultGraphs;\n","import React, { useEffect } from 'react';\n\n// Import Boootstrap components:\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\n// Import Victory:\nimport { VictoryChart, VictoryLine, VictoryTheme } from 'victory';\n\nconst Worldwide = () => {\n    return (\n        <Container style={{padding: '10px', backgroundColor: '#293742', alignSelf: 'center'}}>\n            <Row>\n                <Col>\n                    <div>\n\n                        <Card  className='text-white' style={{ backgroundColor:  '#202B33'}}>\n                            <Card.Body>\n                                <Card.Title>Deaths / Cases</Card.Title>\n                                <Card.Subtitle className='mb-2 text-muted'>World Wide</Card.Subtitle>\n                                <Card.Body style={{ padding: '2px'}}>\n                                {/* <Graph>{ this.props.type }</Graph> */}\n                                    <VictoryChart theme={VictoryTheme.material}>\n                                        <VictoryLine\n                                            interpolation=\"natural\"\n                                            data={[\n                                            { x: 'Jan 2020', y: 2 },\n                                            { x: 'Feb 2020', y: 3 },\n                                            { x: 'March 2020', y: 5 },\n                                            { x: 'April 2020', y: 4 },\n                                            { x: 'May 2020', y: 6 }\n                                            ]}\n                                        />\n                                    </VictoryChart>\n                                </Card.Body>\n                                <Card.Text>\n                                Some quick example text incase \n                                the user may want to put notes here. \n                                This feature can easily be taken out \n                                but I implemented it just incase we had \n                                a use for it.\n                                </Card.Text>\n                                <Card.Link href='#'>Enlarge</Card.Link>\n                                <Card.Link href='#'>Edit</Card.Link>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Worldwide;","/*\n\t- Add bootstrap\n\t- Rewrite algorithm to dynamically render the graphs.\n\t- Rewrite the drag and drop algorithm to accomodate the Bootstrap grid system.\n*/\n\n// Import CSS.\nimport './App.css'; // Import styings for the application.\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import the bootstrap styles.\n\n// Import React.\nimport React, { useContext, useState, useRef } from 'react'; // Import react.\n\n// Import My Components.\nimport Graph from './Components/Graphs/Graph';\nimport { DndGrid } from './Components/DndGrid';\nimport DataGripCard from './Components/Card/Card'; // Import Card for the graphs.\nimport DefaultGraphs from './Components/Parts/DefaultGraphs';\nimport Worldwide from './Components/Parts/WorldWide';\n\n// Import Bootstrap Components (Import each component ont at a time to save space).\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst data = { // Example data for the graphs.\n\titems: ['1', '2', '3', '4', '5', '6'] // Create a grid like object/array to better initiate the dragging functionality.\n}\n\nconst types = {\n\titems: ['1', '2', '3', '1', '2', '3'] // Create a test object to store the graphs created.\n}\n\nfunction App() {\n\n  \t//const [sidebar, setSidebar] = useState(true);\n\t//const size = useContext(ResponsiveContext); \n\n\tconst [list, setList] = useState(data); // Create states for list.\n\tconst [dragging, setDragging] = useState(false); // Create statets for dragging.\n\tconst dragItem = useRef(); \n\tconst dragNode = useRef();\n  \t\n\tconst handleDragStart = (e, location) => { // Calls when the mouse clicks on the item to initiate the drag.\n\t\tconsole.log('drag starting', location);\n\t\tdragItem.current = location;\n\t\tdragNode.current = e.target;\n\t\tdragNode.current.addEventListener('dragend', handleDragEnd);\n\t\tsetTimeout(() => {\n\t\t\tsetDragging(true);\n\n\t\t}, 0)\n\t}\n\n\tconst handleDragEnd = () => { // Calls when the user lifts the mouse button.\n\t\tconsole.log('Ending Drag');\n\t\tsetDragging(false);\n\t\tdragItem.current = null;\n\t\tdragNode.current.removeEventListener('dragend', handleDragEnd);\n\t\tdragNode.current = null;\n\t}\n\n\tconst handleDragEnter = (e, location) => { // Calls when the object being dragged overlaps another item.\n\t\tconsole.log('Entering Item', location);\n\n\t\tconst currentItem = dragItem.current;\n\n\t\tif (e.target !== dragNode.current) {\n\t\t\tconsole.log(\"TARGET IS NOT THE SAME\");\n\t\t\tsetList(oldList => {\n\t\t\t\tlet newList = JSON.parse(JSON.stringify(oldList)); // This isn't very efficient.\n\t\t\t\tnewList.items.splice(location, 0, newList.items.splice(currentItem.i1, 1)[0]);\n\t\t\t\tdragItem.current = location;\t\n\t\t\t\treturn newList;\n\t\t\t})\n\t\t}\n\t\tconsole.log(data.items);\n\n\t}\n\n\tconst getStyles = () => { // A template to maybe add stylse to the project.\n\t\treturn 'current';\n\t}\n\t\n\treturn (\n\t\t<>\n\t\t\t<Navbar style={{ backgroundColor: '#30404D' }} className='text-white'>\n\t\t\t\t<Navbar.Brand>Hello</Navbar.Brand>\n\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t<Nav.Link href=\"#home\">Create</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"#features\">Manage</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"#pricing\">Help</Nav.Link>\n\t\t\t\t</Nav>\n\t\t\t</Navbar>\n\n\t\t\t{/*\n\t\t\t\tDrag Start: set current item being dragged\n\t\t\t\tInit draged listener\n\t\t\t\tstle dragges card\n\t\t\t\tinit dragenter listeners\n\n\n\t\t\t\tDrag Enter\n\t\t\t\tSet target item if not itself-\n\t\t\t\tHandle no item case push to group\n\t\t\t\tre-order state\nstyle={{backgroundColor: '#0B0C10',\n\t\t\t\tDrag end\n\t\t\t\tClean up current item remove drop end listener\n\t\t\t*/}\n\t\t\t<Worldwide />\n\t\t\t<DefaultGraphs />\n\t\t\t<Container style={{padding: '10px', backgroundColor: '#293742', alignSelf: 'center'}}>\n\t\t\t\t<Row>\n\t\t\t\t\t{\n\t\t\t\t\t\tlist.items.map((i, i1) => (\n\t\t\t\t\t\t\t<div style={{width: '20rem', backgroundColor: '#293742', alignContent: 'center', marginRight: '10px', marginTop: '10px' }} className={dragging?getStyles():\"dndItem\"} draggable onDragStart={(e) => {\n\t\t\t\t\t\t\t\thandleDragStart(e, i1)\n\t\t\t\t\t\t\t}} \n\t\t\t\t\t\t\tonDragEnter={dragging?(e) => {\n\t\t\t\t\t\t\t\thandleDragEnter(e, i1)\n\t\t\t\t\t\t\t} : null}>\n\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t<DataGripCard name={i} type={types.items[i1]}/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</Row>\n\t\t\t</Container>\n\n\t\t</>\n  \t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}