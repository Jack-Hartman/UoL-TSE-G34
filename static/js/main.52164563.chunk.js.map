{"version":3,"sources":["Components/Parts/CustomLabel.js","Components/Parts/DefaultGraphs.js","Views/Default.js","Views/About.js","Views/Loading.js","Views/FindCountry.js","Views/Compare.js","App.js","reportWebVitals.js","index.js"],"names":["CustomLabel","this","props","x","y","orientation","pointerLength","cornerRadius","flyoutWidth","flyoutHeight","flyoutStyle","fill","Component","colors","DefaultGraphs","chartTheme","axis","style","tickLabels","jsonDataChoice","Container","fluid","backgroundColor","alignSelf","Row","Jumbotron","className","marginBottom","Col","xs","Card","Body","retrievalType","data","home_data","Name","animate","easing","duration","width","height","labels","fontSize","fillOpacity","colorScale","innerRadius","theme","color","global_data","region_data","map","x1","alignContent","marginRight","marginTop","Title","Subtitle","padding","labelComponent","Text","Link","href","Default","About","Loading","class","FindCountry","state","Countries","fetch","process","then","res","ok","json","setState","countries","console","log","Button","variant","margin","onClick","action","React","Compare","SelectedCountries","dataChoice","cases","deaths","clearCountries","bind","arg","length","previouslySelectedCountries","push","borderColor","ListGroup","Item","listClick","Header","as","Table","striped","bordered","hover","country","index","grid","stroke","parent","border","left","bottom","right","domainPadding","offset","App","View","Data","Home","RetrievalType","handleAboutClick","handleCreateClick","handleHomeClick","handleSetHomeClick","handleCompareClick","handler","cumulativeTotalClick","cumulativeTotalPerPop","reportedInPastDay","reportedInPastWeek","reportedInPastWeekPerPop","setTimeout","destination","ui","production","isProduction","Navbar","Brand","Nav","paddingRight","DropdownButton","id","title","Dropdown","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52164563.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { VictoryLabel, VictoryTooltip } from 'victory';\n\nclass CustomLabel extends Component {\n    render() {\n        return (\n            <g>\n                <VictoryLabel {...this.props}/>\n                <VictoryTooltip\n                    {...this.props}\n                    x={200} y={250}\n                    orientation=\"top\"\n                    pointerLength={0}\n                    cornerRadius={50}\n                    flyoutWidth={100}\n                    flyoutHeight={100}\n                    flyoutStyle={{ fill: \"black\" }}\n                />\n             </g>\n        );\n      }\n}\n\nexport default CustomLabel;","import React from 'react';\n\n// Import Boootstrap components:\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\n// Import victory charts:\nimport { VictoryPie } from 'victory';\n\n// Import my components:\nimport CustomLabel from './CustomLabel';\n\n// For all of the chart colors.\nconst colors = [\n    [ '#388087', '#6fb3b8' ],\n    [ '#5D7529', '#DBF7A0' ],\n    [ '#36752E', '#B3F7AA' ],\n    [ '#317546', '#B1F7C6' ],\n    [ '#2F745D', '#AFF7DF' ],\n    [ '#347175', '#B6F2F7' ],\n    [ '#374775', '#BECCF7' ],\n    [ '#4C3374', '#CFB6F7' ],\n    [ '#603074', '#E1AFF7' ],\n    [ '#75276F', '#F79BEF' ],\n    [ '#751930', '#F77E9C' ],\n    [ '#751D17', '#F7837B' ],\n    [ '#75311A', '#F79E80' ],\n    [ '#754E1D', '#F7C588' ],\n    [ '#755419', '#F7CA7E' ],\n    [ '#746337', '#F7E6BE' ],\n    [ '#756D1B', '#F7ED83' ],\n    [ '#A8608E', '#E1FFDE' ],\n    [ '#A87060', '#DEFFF6' ],\n    [ '#A88560', '#DEF6FF' ],\n    [ '#A89F60', '#E3DEFF' ],\n    [ '#60A8A1', '#FFE8DE' ],\n    [ '#6079A8', '#FFF5DE' ],\n    [ '#357C8F', '#F96B64' ],\n    [ '#37358F', '#F9A54F' ],\n    [ '#82358F', '#F9E272' ],\n    [ '#8F5435', '#76FA85' ],\n    [ '#906C35', '#74F6C4' ],\n    [ '#388087', '#6fb3b8' ],\n    [ '#5D7529', '#DBF7A0' ],\n    [ '#36752E', '#B3F7AA' ],\n    [ '#317546', '#B1F7C6' ],\n    [ '#2F745D', '#AFF7DF' ],\n    [ '#347175', '#B6F2F7' ],\n    [ '#374775', '#BECCF7' ],\n    [ '#4C3374', '#CFB6F7' ],\n    [ '#603074', '#E1AFF7' ],\n    [ '#75276F', '#F79BEF' ],\n    [ '#751930', '#F77E9C' ],\n    [ '#751D17', '#F7837B' ],\n    [ '#75311A', '#F79E80' ],\n    [ '#754E1D', '#F7C588' ],\n    [ '#755419', '#F7CA7E' ],\n    [ '#746337', '#F7E6BE' ],\n    [ '#756D1B', '#F7ED83' ],\n    [ '#A8608E', '#E1FFDE' ],\n    [ '#A87060', '#DEFFF6' ],\n    [ '#A88560', '#DEF6FF' ],\n    [ '#A89F60', '#E3DEFF' ],\n    [ '#60A8A1', '#FFE8DE' ],\n    [ '#6079A8', '#FFF5DE' ],\n    [ '#357C8F', '#F96B64' ],\n    [ '#37358F', '#F9A54F' ],\n    [ '#82358F', '#F9E272' ],\n    [ '#8F5435', '#76FA85' ],\n    [ '#906C35', '#74F6C4' ]\n]\n\nconst DefaultGraphs = (props) => {\n\n    const chartTheme = {\n        axis: {\n          style: {\n            tickLabels: {\n              // this changed the color of my numbers to white\n              fill: 'white',\n            },\n          },\n        },\n      };\n    \n    // This is used to tell the user for the time frame of the data being displayed.\n    let dataChoice = [\n        'Cumulative total', \n        'Cumulative total per 100000 population', \n        'Newly reported in last 24 hours', \n        'Newly repoted in last 7 days'\n    ];\n\n    // This is for the json requests.\n    let jsonDataChoice = {\n        cases: [\n            'Cases - cumulative total',\n            'Cases - cumulative total per 100000 population',\n            'Cases - newly reported in last 24 hours',\n            'Cases - newly reported in last 7 days',\n            'Cases - newly reported in last 7 days per 100000 population'\n        ],\n        deaths: [\n            'Deaths - cumulative total',\n            'Deaths - cumulative total per 100000 population',\n            'Deaths - newly reported in last 24 hours',\n            'Deaths - newly reported in last 7 days',\n            'Deaths - newly reported in last 7 days per 100000 population'\n        ]\n    }\n\n    return (\n        <Container fluid style={{ backgroundColor: '#293742', alignSelf: 'center'}}>\n            <Row>\n            <Container>\n                    <Jumbotron className=\"text-white\" style={{ backgroundColor:  '#202B33' }}>\n                        <h1>Welcome to G34 Covid Analyser</h1>\n                        { /* This is for the local cases and deaths */ }\n                        <Row style={{ marginBottom:'10px' }}>\n                            <Col>\n\n                            </Col>\n                            <Col xs={6}>\n                                <Card style={{ backgroundColor: '#193038'}}>\n                                    <Card.Body>\n                                        <p>You are currently viewing the data in this mode: {dataChoice[props.retrievalType]}.</p>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <h3>{ props.data.home_data.Name }</h3>\n                                <div className=\"jumbo-charts\">\n                                    <VictoryPie \n                                        animate={{ easing: 'exp', duration: 1000 }} \n                                        data={[\n                                            { x: 'Deaths', y: props.data.home_data[jsonDataChoice.deaths[props.retrievalType]]},\n                                            { x: 'Cases', y: props.data.home_data[jsonDataChoice.cases[props.retrievalType]] }\n                                        ]} \n                                        width={250} \n                                        height={250}\n                                        style={{ \n                                            labels: { fontSize: 12, fill: \"white\"},\n                                            data: {\n                                                fillOpacity: 1\n                                            }\n                                        }}\n                                        colorScale={colors[0]} \n                                        innerRadius={50} \n                                        theme={chartTheme}\n                                    />\n                                </div>\n                                <Card style={{ backgroundColor: '#193038'}}>\n                                    <Card.Body>\n                                        <h6 color='#388087'>Deaths: {props.data.home_data[jsonDataChoice.deaths[props.retrievalType]]}</h6>\n                                        <h6 color='#6fb3b8'>Cases: {props.data.home_data[jsonDataChoice.cases[props.retrievalType]]}</h6>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <h3>Global</h3>\n                                <div className=\"jumbo-charts\">\n                                    <VictoryPie \n                                        animate={{ easing: 'exp', duration: 1000 }} \n                                        data={[\n                                            { x: 'Deaths', y: props.data.global_data[jsonDataChoice.deaths[props.retrievalType]]},\n                                            { x: 'Cases', y: props.data.global_data[jsonDataChoice.cases[props.retrievalType]] }\n                                        ]} \n                                        width={250} \n                                        height={250}\n                                        style={{ \n                                            labels: { fontSize: 12, fill: \"white\"},\n                                            data: {\n                                                fillOpacity: 1\n                                            }\n                                        }}\n                                        colorScale={colors[0]} \n                                        innerRadius={50} \n                                        theme={chartTheme}\n                                    />\n                                </div>\n                                <Card style={{ backgroundColor: '#193038'}}>\n                                    <Card.Body>\n                                        <h6 color='#388087'>Deaths: {props.data.global_data[jsonDataChoice.deaths[props.retrievalType]]}</h6>\n                                        <h6 color='#6fb3b8'>Cases: {props.data.global_data[jsonDataChoice.cases[props.retrievalType]]}</h6>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                        { /* This is for the global cases and deaths */ }\n                    </Jumbotron>\n                </Container>\n            </Row>\n            <Row>\n                \n                {\n                    props.data.region_data.map((x, x1) => {\n                        return (\n                            <Col>\n                                <div style={{\n                                    width: '20rem', \n                                    backgroundColor: '#293742', \n                                    alignContent: 'center', \n                                    marginRight: '10px', \n                                    marginTop: '10px' \n                                }}>\n                                    <Card className='text-white' style={{ width: '20rem', backgroundColor:  '#202B33'}}>\n                                        <Card.Body>\n                                            <Card.Title>{x.Name}</Card.Title>\n                                            <Card.Subtitle className='mb-2 text-muted'>Deaths / Cases</Card.Subtitle>\n                                            <Card.Body style={{ padding: '2px'}}>\n                                            <VictoryPie \n                                                animate={{ easing: 'exp', duration: 1000 }} \n                                                data={[\n                                                    { x: 'Deaths', y: x[jsonDataChoice.deaths[props.retrievalType]]},\n                                                    { x: 'Cases', y: x[jsonDataChoice.cases[props.retrievalType]] }\n                                                ]} \n                                                width={250} \n                                                height={250}\n                                                style={{ \n                                                    labels: { fontSize: 12, fill: \"white\"},\n                                                    data: {\n                                                        fillOpacity: 1\n                                                    }\n                                                }}\n                                                colorScale={colors[x1]} \n                                                innerRadius={50} \n                                                theme={chartTheme}\n                                                labelComponent={<CustomLabel />}\n                                            />\n                                                \n                                            </Card.Body>\n                                            <Card.Text>\n                                                <h4>Cases: { x[jsonDataChoice.cases[props.retrievalType]] }</h4>\n                                                <h4>Deaths: { x[jsonDataChoice.deaths[props.retrievalType]] }</h4>\n                                            </Card.Text>\n                                            <Card.Link href='#'>Enlarge</Card.Link>\n                                            <Card.Link href='#'>Edit</Card.Link>\n                                        </Card.Body>\n                                    </Card>\n                                </div>\n                            </Col>\n                        )\n                    })\n                }\n            </Row>\n        </Container>\n    )\n}\n\nexport default DefaultGraphs;\n","\nimport React, { Component } from 'react'; // Import React.\n\n// Import Bootstrap Components: (Import each component ont at a time to save space).\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\n// Import My Components:\nimport DefaultGraphs from '../Components/Parts/DefaultGraphs';\n\nclass Default extends Component {\n\tconstructor(props) {\n\t\tsuper (props);\n\t}\n    render() {\n        return (\n            <Container fluid style={{padding: '5px', backgroundColor: '#293742', alignSelf: 'center'}}>\n\t\t\t\t<Row style={{ width: '100%'}}>\n\t\t\t\t\t<DefaultGraphs style={{ alignSelf: 'center' }} data={this.props.data} retrievalType={this.props.retrievalType}/>\n\t\t\t\t</Row>\n\t\t\t</Container>\n        );\n    }\n}\n\nexport default Default;","import React from 'react';\n\n// Import react bootstrap components:\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction About() {\n    return (\n        <Container>\n            <Jumbotron>\n                <h1>Welcome to G34 Covid Analyser</h1>\n                <h3>Max Pittock</h3>\n                <h3>Galani Anagnostopoulou</h3>\n                <h3>Jack Hartman</h3>\n                <h3>Joeseph Murphy</h3>\n                <h3>Thomas Houghton</h3>\n            </Jumbotron>\n            \n        </Container>\n    );\n}\n\nexport default About;\n\n","// Import CSS.\nimport '../Styles/Loading.css';\n\n// Import React.\nimport React, { Componeent } from 'react';\n\nconst Loading = () => {\n\n    return (\n        <>\n            <div class=\"loader\">\n                <div class=\"loader-inner\">\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                    <div class=\"loader-line-wrap\">\n                    <div class=\"loader-line\"></div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Loading;","\nimport React from 'react';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\n// Create a view where the user can select the country they're from.\nclass FindCountry extends React.Component {\n    \n    constructor(props) {\n        super (props);\n        this.state = { Countries: ['none'] };\n    }\n    \n    componentDidMount() { //Runs after the component has been mounted\n        fetch(`${process.env.REACT_APP_API_LOC}/who-countries`).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n        }).then(data => {\n            this.setState(state => ({\n                Countries: data.countries\n            }));\n        });\n    }\n\n    render() {\n        console.log(this.state.Countries);\n        return(\n            <div>\n                <Container>\n                    <Jumbotron className='text-white' style={{marginTop: '30px', backgroundColor:  '#202B33' }}>\n                        <h1>Welcome to G34 Covid Analyser</h1>\n                        <p>Please select the country that you are from:</p>\n                    </Jumbotron>\n                    {\n                        this.state.Countries.map((x) => {\n                            return <Button variant=\"info\" style={{ margin: '10px' }} onClick={() => { this.props.action(x) }}>{x}</Button>\n                        })\n                    }\n                </Container>\n            </div>\n        );\n    }    \n}\n\nexport default FindCountry;\n","import '../Styles/Compare.css';\n\nimport React, { Component } from 'react';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table'; \n\nimport {\n    VictoryChart,\n    VictoryGroup,\n    VictoryBar\n} from 'victory';\n\n\n\nclass Compare extends Component {\n\n    constructor(props) {\n        super (props);\n\n        // Setup the states for the countries:\n        this.state = { Countries: ['none'], SelectedCountries: [] };\n\n        // For all of the chart colors.\n        this.colors = [\n            [ '#388087', '#6fb3b8' ],\n            [ '#5D7529', '#DBF7A0' ],\n            [ '#36752E', '#B3F7AA' ],\n            [ '#317546', '#B1F7C6' ],\n            [ '#2F745D', '#AFF7DF' ],\n            [ '#347175', '#B6F2F7' ],\n            [ '#374775', '#BECCF7' ],\n            [ '#4C3374', '#CFB6F7' ],\n            [ '#603074', '#E1AFF7' ],\n            [ '#75276F', '#F79BEF' ],\n            [ '#751930', '#F77E9C' ],\n            [ '#751D17', '#F7837B' ],\n            [ '#75311A', '#F79E80' ],\n            [ '#754E1D', '#F7C588' ],\n            [ '#755419', '#F7CA7E' ],\n            [ '#746337', '#F7E6BE' ],\n            [ '#756D1B', '#F7ED83' ],\n            [ '#A8608E', '#E1FFDE' ],\n            [ '#A87060', '#DEFFF6' ],\n            [ '#A88560', '#DEF6FF' ],\n            [ '#A89F60', '#E3DEFF' ],\n            [ '#60A8A1', '#FFE8DE' ],\n            [ '#6079A8', '#FFF5DE' ],\n            [ '#357C8F', '#F96B64' ],\n            [ '#37358F', '#F9A54F' ],\n            [ '#82358F', '#F9E272' ],\n            [ '#8F5435', '#76FA85' ],\n            [ '#906C35', '#74F6C4' ],\n            [ '#388087', '#6fb3b8' ],\n            [ '#5D7529', '#DBF7A0' ],\n            [ '#36752E', '#B3F7AA' ],\n            [ '#317546', '#B1F7C6' ],\n            [ '#2F745D', '#AFF7DF' ],\n            [ '#347175', '#B6F2F7' ],\n            [ '#374775', '#BECCF7' ],\n            [ '#4C3374', '#CFB6F7' ],\n            [ '#603074', '#E1AFF7' ],\n            [ '#75276F', '#F79BEF' ],\n            [ '#751930', '#F77E9C' ],\n            [ '#751D17', '#F7837B' ],\n            [ '#75311A', '#F79E80' ],\n            [ '#754E1D', '#F7C588' ],\n            [ '#755419', '#F7CA7E' ],\n            [ '#746337', '#F7E6BE' ],\n            [ '#756D1B', '#F7ED83' ],\n            [ '#A8608E', '#E1FFDE' ],\n            [ '#A87060', '#DEFFF6' ],\n            [ '#A88560', '#DEF6FF' ],\n            [ '#A89F60', '#E3DEFF' ],\n            [ '#60A8A1', '#FFE8DE' ],\n            [ '#6079A8', '#FFF5DE' ],\n            [ '#357C8F', '#F96B64' ],\n            [ '#37358F', '#F9A54F' ],\n            [ '#82358F', '#F9E272' ],\n            [ '#8F5435', '#76FA85' ],\n            [ '#906C35', '#74F6C4' ]\n        ]\n\n        // This sets the charts axis labels to the color white:\n        this.chartTheme = {\n            axis: {\n                style: {\n                    tickLabels: {\n                        fill: 'white',\n                    }\n                }\n            }\n        }\n\n        // This is used to tell the user the timeframe for the data, not for the json requests.\n        this.dataChoice = [\n            'Cumulative total', \n            'Cumulative total per 100000 population', \n            'Newly reported in last 24 hours', \n            'Newly repoted in last 7 days'\n        ];\n\n        // Stores the specific json requests for the data.\n        this.jsonDataChoice = {\n            cases: [\n                'Cases - cumulative total',\n                'Cases - cumulative total per 100000 population',\n                'Cases - newly reported in last 24 hours',\n                'Cases - newly reported in last 7 days',\n                'Cases - newly reported in last 7 days per 100000 population'\n            ],\n            deaths: [\n                'Deaths - cumulative total',\n                'Deaths - cumulative total per 100000 population',\n                'Deaths - newly reported in last 24 hours',\n                'Deaths - newly reported in last 7 days',\n                'Deaths - newly reported in last 7 days per 100000 population'\n            ]\n        }\n\n        // Bind the clear countries button to enable state change from the function.\n        this.clearCountries = this.clearCountries.bind(this); \n    }\n\n    componentDidMount() { //Runs after the component has been mounted\n        // Fetch all the countries:\n        fetch(`${process.env.REACT_APP_API_LOC}/who-countries`).then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n        }).then(data => {\n            this.setState(state => ({\n                Countries: data.countries\n            }));\n        });\n    }\n\n    listClick(arg) {\n        // This is to set a maximum amount of countries for comparison as too many will mess up the graphs.\n        if (this.state.SelectedCountries.length === 4) {\n            console.log('Selected too many countries');\n        } else {    \n            console.log(`List click: ${arg}`);\n            fetch(`${process.env.REACT_APP_API_LOC}/worldwide?country=${arg}`).then((res) => {\n                if (res.ok) {\n                    console.log(res);\n                    return res.json();\n                }\n            }).then(data => {\n                let previouslySelectedCountries = this.state.SelectedCountries;\n                previouslySelectedCountries.push(data.home_data);\n                this.setState(state => ({\n                    SelectedCountries: previouslySelectedCountries\n                }));\n            }); \n        }\n    }\n\n    // This is a button handler to clear all the selected countries:\n    clearCountries() {\n        this.setState(state => ({\n            SelectedCountries: []\n        }));\n    }\n\n\n    render() {\n        return(\n            <Container fluid>\n                <Row>\n                    <Col xs={2}>\n                    <Card className='scrollable' style={{ width: '14rem', height: '50rem', backgroundColor:  '#202B33', color: 'white', borderColor: '#A7FFF4' }}>\n                        <ListGroup  variant=\"flush\">\n                            {\n                                // Display all the countries that the user can select:\n                                this.state.Countries.map((x) => {\n                                    return <ListGroup.Item style={{ backgroundColor:  '#202B33', color: 'white', borderColor: '#A7FFF4'}} onClick={() => this.listClick(x)}>{x}</ListGroup.Item>\n                                })\n                            }\n                        </ListGroup>\n                        \n                    </Card>\n                    </Col>\n                    <Col xs={10}>\n                        <Container>\n                            <Card className='text-white' style={{ width: '60rem', marginBottom: '20px', backgroundColor:  '#202B33' }}>\n                                <Card.Header as=\"h5\">Key and data</Card.Header>\n                                    <h3>Currently viewing: {this.dataChoice[this.props.retrievalType]}</h3>\n                                    <Card.Body>\n                                        <Table striped bordered hover variant=\"dark\">\n                                            <thead>\n                                                <tr>\n                                                <th>Color</th>\n                                                <th>Country</th>\n                                                <th>Cases</th>\n                                                <th>Deaths</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    this.state.SelectedCountries.map((country, index) => {\n                                                        return (\n                                                            <tr>\n                                                                <td style={{backgroundColor: this.colors[index + 10][0], color: 'white'}}>{ index + 1 }</td>\n                                                                <td>{ country.Name }</td>\n                                                                <td>{ country[this.jsonDataChoice.cases[this.props.retrievalType]] }</td>\n                                                                <td>{ country[this.jsonDataChoice.deaths[this.props.retrievalType]] }</td>\n                                                            </tr>\n                                                        )\n                                                    })\n                                                }\n                                            </tbody>\n                                        </Table>\n                                        <Card.Link onClick={this.clearCountries}>Clear</Card.Link>\n                                    </Card.Body>\n                            </Card>\n\n                            <Card className='text-white' style={{ width: '60rem', backgroundColor:  '#202B33'  }}>\n                                <Card.Header as=\"h5\"> Cases Comparison</Card.Header>\n                                    <Card.Body>\n                                        The key with all assosiated colours goes here.\n                                    </Card.Body>\n                                    <Card.Body>\n                                        <Card.Title>Cases Compared</Card.Title>\n                                        {/* domainPadding={{ x : [20, 20] }} */}\n                                        <div style={{padding: '20px' }}>\n                                            <VictoryChart theme={this.chartTheme} style={{ grid: { stroke: 'none',parent: { border: '3px solid #ffffff' } } }} padding={{ left: 80, bottom: 40, right: 20 }} domainPadding={{ x: 50, y: 50 }}>\n                                                <VictoryGroup offset={10}\n                                                >\n                                                    {\n                                                        // Loops through the selected countries and displays the individual bars:\n                                                        this.state.SelectedCountries.map((country, index) => {\n                                                            return <VictoryBar style={{ data: { fill: this.colors[index + 10][0] } }} data={[ { x: country.Name, y: country[this.jsonDataChoice.cases[this.props.retrievalType]]  } ]}/>\n                                                        })\n                                                    }\n\n                                                </VictoryGroup>\n                                            </VictoryChart>\n                                        </div>\n                                </Card.Body>\n                            </Card>\n\n                            <Card className='text-white' style={{ width: '60rem', marginTop: '20px', backgroundColor: '#202B33' }}>\n                                <Card.Header as=\"h5\">Deaths Comparison</Card.Header>\n                                    <Card.Body>\n                                        The key with all assosiated colours goes here.\n                                    </Card.Body>\n                                    <Card.Body>\n                                        <Card.Title>Deaths Compared</Card.Title>\n                                        <VictoryChart theme={this.chartTheme} style={{ grid: { stroke: 'none',parent: { border: '3px solid #ffffff' } } }} padding={{ left: 80, bottom: 40, right: 20 }} domainPadding={{ x: 50 }}>\n                                            <VictoryGroup offset={20}\n                                            >\n                                                \n                                                {\n                                                    // Loops through the selected coutnries and displays the individual bars: \n                                                    this.state.SelectedCountries.map((country, index) => {\n                                                        return <VictoryBar style={{ data: { fill: this.colors[index + 10][0] } }} data={[{ x: country.Name, y: country[this.jsonDataChoice.deaths[this.props.retrievalType]]} ]}/>\n                                                    })\n                                                }\n\n                                            </VictoryGroup>\n                                        </VictoryChart>\n                                        \n                                </Card.Body>\n                            </Card>\n                        </Container>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Compare;","// Import CSS.\nimport './App.css'; // Import styings for the application.\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import the bootstrap styles.\n\n// Import React.\nimport React, { Component } from 'react'; // Import react.\n\n// Import My Components.\nimport Default from './Views/Default';\nimport About from './Views/About';\nimport Loading from './Views/Loading';\nimport FindCountry from './Views/FindCountry';\nimport Compare from './Views/Compare';\n\n// Import Bootstrap Components (Import each component ont at a time to save space).\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\nclass App extends Component {\n\t\n\tconstructor(props) {\n\t\tsuper (props);\n\t\t\n\t\tthis.state = { View: 'findCountry', Data: 'null', Home: 'null', RetrievalType: 0}\n\t\t\n\t\t// This binding is neccessary to make `this` work in the callback\n\t\tthis.handleAboutClick = this.handleAboutClick.bind(this);\n\t\tthis.handleCreateClick = this.handleCreateClick.bind(this);\n\t\tthis.handleHomeClick = this.handleHomeClick.bind(this);\n\t\tthis.handleSetHomeClick = this.handleSetHomeClick.bind(this);\n\t\tthis.handleCompareClick = this.handleCompareClick.bind(this);\n\t\t\n\t\t// Bind the state handler to the function.\n\t\tthis.handler = this.handler.bind(this);\n\t\t\n\t\t// Dropdown clicks:\n\t\tthis.cumulativeTotalClick = this.cumulativeTotalClick.bind(this);\n\t\tthis.cumulativeTotalPerPop = this.cumulativeTotalPerPop.bind(this);\n\t\tthis.reportedInPastDay = this.reportedInPastDay.bind(this);\n\t\tthis.reportedInPastWeek = this.reportedInPastWeek.bind(this);\n\t\tthis.reportedInPastWeekPerPop = this.reportedInPastWeekPerPop.bind(this);\n\t}\n\n\thandler(arg) {\n\t\tconsole.log(arg);\n\n\t\tthis.setState(state => ({\n\t\t\tView: 'loading',\n\t\t\tHome: arg\n\t\t}), () => {\n\t\t\t// Set timeout for loading animation.\n\t\t\tsetTimeout(() => {\n\t\t\t\t// Fetch the main chunck of data for the application.\n\t\t\t\tfetch(`${process.env.REACT_APP_API_LOC}/worldwide?country=${this.state.Home}`).then((res) => {\n\t\t\t\t\tif (res.ok) {\n\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t\treturn res.json();\n\t\t\t\t\t}\n\t\t\t\t}).then(data => {\n\t\t\t\t\tconsole.log(data)\n\t\t\t\t\tthis.setState(state => ({\n\t\t\t\t\t\tView: 'default',\n\t\t\t\t\t\tData: data\n\t\t\t\t\t}));\n\t\t\t\t\tconsole.log(this.state.Data);\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t});\n\t}\n\t\n\t// This handles the loading and data retrieval animation.\n\tstateHandler() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'loading'\n\t\t}));\n\t}\n\n\tgetCurrentView() {\n\t\treturn this.state;\n\t}\n\n\t// Click event functions:\n\thandleNavClick(destination) {\n\t\t// Need to see what the value is:\n\t\tthis.setState(state => ({ // set the state.\n\t\t\tView: 'about'\n\t\t}));\n\t}\n\n\thandleCreateClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'create'\n\t\t}));\n\t}\n\t\n\thandleSetHomeClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'findCountry'\n\t\t}));\n\t}\n\n\thandleAboutClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'about'\n\t\t}));\n\t}\n\n\thandleCompareClick() {\n\t\tthis.setState(state => ({\n\t\t\tView: 'compare'\n\t\t}));\n\t}\n\n\thandleHomeClick() {\n\t\tif(this.state.Home != 'null'){\n\t\t\tthis.setState(state => ({\n\t\t\t\tView: 'default'\n\t\t\t}));\n\t\t}\n\t\telse{\n\t\t\tthis.setState(state => ({\n\t\t\t\tView: 'findCountry'\n\t\t\t}));\n\t\t}\n\t}\n\n\tcumulativeTotalClick() {\n\t\tthis.setState(state => ({\n\t\t\tRetrievalType: 0\n\t\t}));\n\t}\n\n\tcumulativeTotalPerPop() {\n\t\tthis.setState(state => ({\n\t\t\tRetrievalType: 1\n\t\t}));\n\t}\n\n\treportedInPastDay() {\n\t\tthis.setState(state => ({\n\t\t\tRetrievalType: 2\n\t\t}));\n\t}\n\n\treportedInPastWeek() {\n\t\tthis.setState(state => ({\n\t\t\tRetrievalType: 3\n\t\t}));\n\t}\n\n\treportedInPastWeekPerPop() {\n\t\tthis.setState(state => ({\n\t\t\tRetrievalType: 4\n\t\t}));\n\t}\n\n\trender () {\n\n\t\t// This handler tell the application which view to display as this is a single page application:\n\t\tlet ui;\n\n\t\tif (this.state.View === 'default') {\n\t\t\tui = <Default data={this.state.Data} production={this.isProduction} retrievalType={this.state.RetrievalType}/>\n\t\t} else if (this.state.View === 'about') {\n\t\t\tui = <About />\n\t\t} else if (this.state.View === 'loading') {\n\t\t\tui = <Loading />\n\t\t} else if (this.state.View === 'findCountry') {\n\t\t\tui = <FindCountry action={this.handler}  production={this.isProduction}/>\n\t\t} else if (this.state.View === 'compare') {\n\t\t\tui = <Compare production={this.isProduction} retrievalType={this.state.RetrievalType}/>\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Navbar style={{ backgroundColor: '#30404D' }} className='text-white'>\n\t\t\t\t\t<Navbar.Brand style={{ color: '#ffffff' }}>G34 Covid Analyser</Navbar.Brand>\n\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t<Button className=\"navButton\" style={{ paddingRight: '5px'}} variant=\"primary\" onClick={this.handleHomeClick}>Home</Button>\n\t\t\t\t\t\t<Button className=\"navButton\" style={{ paddingRight: '5px' }} variant=\"primary\" onClick={this.handleCompareClick}>Compare</Button>\n\t\t\t\t\t\t<Button className=\"navButton\" style={{ paddingRight: '5px' }} variant=\"info\" onClick={this.handleAboutClick}>About</Button>\n\t\t\t\t\t\t<Button className=\"navButton\" style={{ paddingRight: '5px' }} variant=\"info\" onClick={this.handleSetHomeClick}>Set Home Country</Button>\n\t\t\t\t\t\t<DropdownButton id=\"dropdown-basic-button\" title=\"Select your option\">\n\t\t\t\t\t\t\t<Dropdown.Item href=\"#/action-1\" onClick={this.reportedInPastDay}>Newly Reported in last 24 Hours</Dropdown.Item>\n\t\t\t\t\t\t\t<Dropdown.Item href=\"#/action-2\" onClick={this.reportedInPastWeek}>Newly Reported in last 7 days</Dropdown.Item>\n\t\t\t\t\t\t\t<Dropdown.Item onClick={this.reportedInPastWeekPerPop}>Newly Reported in last 7 days per 100000 population</Dropdown.Item>\n\t\t\t\t\t\t\t<Dropdown.Item onClick={this.cumulativeTotalClick}>Cumulative total</Dropdown.Item>\n\t\t\t\t\t\t\t<Dropdown.Item onClick={this.cumulativeTotalPerPop}>Cumulative total per 100000 population</Dropdown.Item>\n\t\t\t\t\t\t</DropdownButton>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar>\n\t\t\t\t\n\t\t\t\t{/* Where the main view of the application is */}\n\t\t\t\t{\n\t\t\t\t\tui\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}